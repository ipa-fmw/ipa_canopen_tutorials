<launch>

  <!-- upload robot_description -->
  <param name="robot_description" command="$(find xacro)/xacro.py '$(find ipa_canopen_tutorials)/examples/3dof_with_trajectory_controller/urdf/3dof_example.urdf.xacro'" />

  <!-- start robot_state_publisher -->
  <node pkg="robot_state_publisher" type="state_publisher" name="robot_state_publisher"/>

  <!-- parameters for CANopen node and description of the CAN modules -->
  <rosparam command="load" ns="canopen" file="$(find ipa_canopen_tutorials)/examples/3dof_with_trajectory_controller/config/CANopen.yaml" />
  <rosparam command="load" ns="tray_controller" file="$(find ipa_canopen_tutorials)/examples/3dof_with_trajectory_controller/config/3dof_modules.yaml" />

  <!-- This is the CANopen ROS wrapper node -->
  <node ns="canopen" name="canopen_ros" pkg="ipa_canopen_ros" type="canopen_ros" /> 

  <!-- The trajectory controller listens for JointTrajectoryFollowAction and sends velocity commands to the CANopen node -->
  <node ns="tray_controller" name="joint_trajectory_controller" pkg="cob_trajectory_controller" type="cob_trajectory_controller" cwd="node" respawn="false" output="screen" />

  <!-- The action client sends an action to the trajectory controller -->
  <node name="action_client" pkg="ipa_canopen_tutorials" type="3dof_action_client.py" />

</launch>
